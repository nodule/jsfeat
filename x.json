{
  "name": "http",
  "description": "Jsfeat nodes for ChiÏ‡",
  "version": "1.0.0",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodule/jsfeat.git"
  },
  "dependencies": {
    "jsfeat": "0.0.8"
  },
  "nodes": [
    {
      "dependencies": {
        "npm": {
          "jsfeat": "latest"
        }
      },
      "ports": {
        "input": {
          "src": {
            "title": "Source",
            "type": "function"
          },
          "dest": {
            "title": "Destination",
            "async": true,
            "type": "function"
          },
          "kernel_size": {
            "title": "Kernel Size",
            "type": "number",
            "default": 0
          },
          "sigma": {
            "title": "Sigma",
            "type": "number",
            "default": 0
          }
        },
        "output": {
          "out": {
            "title": "Out",
            "type": "function"
          }
        }
      },
      "phrases": {
        "active": "Applying gaussian blur"
      },
      "description": "Gaussian blur",
      "async": true,
      "ns": "jsfeat",
      "name": "gaussian_blur",
      "fn": "on.input.dest = function() {\n  jsfeat.imgproc.gaussian_blur($.src, $.dest, $.kernel_size, $.sigma)\n  \n  output( { out: $.write('dest', $.dest) } );\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "jsfeat": "latest"
        }
      },
      "ports": {
        "input": {
          "src": {
            "title": "Source",
            "type": "ImageData"
          },
          "dest": {
            "title": "Destination",
            "async": true,
            "type": "function"
          },
          "width": {
            "title": "Width",
            "type": "number"
          },
          "height": {
            "title": "Height",
            "type": "number"
          },
          "code": {
            "title": "Code",
            "type": "number",
            "required": false
          }
        },
        "output": {
          "out": {
            "title": "Out",
            "type": "function"
          },
          "imageData": {
            "title": "Image Data",
            "type": "ImageData"
          }
        }
      },
      "phrases": {
        "active": "Applying grayscale"
      },
      "description": "Grayscale",
      "async": true,
      "ns": "jsfeat",
      "name": "grayscale",
      "fn": "on.input.dest  = function() {\n  jsfeat.imgproc.grayscale($.src.data, $.width, $.height, $.dest, $.code)\n  \n  output( {\n    out: $.write('dest', $.dest),\n    imageData: $.write('src', $.src)\n  });\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "jsfeat": "latest"
        }
      },
      "ports": {
        "input": {
          "x": {
            "title": "X",
            "type": "number"
          },
          "y": {
            "title": "Y",
            "type": "number"
          },
          "score": {
            "title": "Score",
            "type": "number",
            "default": 0
          },
          "level": {
            "title": "Level",
            "type": "number",
            "default": 0
          },
          "angle": {
            "title": "Angle",
            "type": "number",
            "default": -1
          }
        },
        "output": {
          "out": {
            "title": "Keypoint",
            "type": "keypoint_t"
          }
        }
      },
      "phrases": {
        "active": "Creating keypoint"
      },
      "description": "Keypoint Type",
      "ns": "jsfeat",
      "name": "keypoint_t",
      "fn": "output = function() {\n  var out = new jsfeat.keypoint_t($.x, $.y, $.score, $.level, $.angle)\n  \n  cb( { out: $.create(out) } );\n  \n  done();\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "jsfeat": "latest"
        }
      },
      "ports": {
        "input": {
          "cols": {
            "title": "Cols",
            "type": "number"
          },
          "rows": {
            "title": "Rows",
            "type": "number"
          },
          "type": {
            "title": "Type",
            "type": "string",
            "enum": [
              "U8_t | C1_t",
              "F32C1_t",
              "U8C1_t"
            ]
          }
        },
        "output": {
          "out": {
            "title": "Matrix",
            "type": "matrix_t"
          }
        }
      },
      "phrases": {
        "active": "Creating matrix"
      },
      "description": "Matrix Type",
      "ns": "jsfeat",
      "name": "matrix_t",
      "fn": "output = function() {\n  var type;\n  \n  switch($.type) {\n    case \"U8_t | C1_t\":\n     type = jsfeat.U8_t | jsfeat.C1_t;\n      break;\n    case \"F32C1_\":\n      type = jsfeat.F32C1_t;\n      break;\n    case \"U8C1_t\":\n      type =  jsfeat.U8C1_t;\n      break;\n    default:\n      throw Error('Unknown type: ' + $.type)\n      break;\n  }\n  \n  var out = new jsfeat.matrix_t($.cols, $.rows, type)\n  \n  cb( { out: $.create(out) } );\n  \n  done();\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "jsfeat": "latest"
        }
      },
      "ports": {
        "input": {
          "src": {
            "title": "Source",
            "type": "function"
          },
          "corners": {
            "title": "Destination",
            "type": "function"
          },
          "count": {
            "title": "Count",
            "type": "number"
          },
          "descriptors": {
            "title": "Descriptors",
            "type": "function",
            "async": true
          }
        },
        "output": {
          "out": {
            "title": "Descriptors",
            "type": "function"
          }
        }
      },
      "phrases": {
        "active": "Describing ORB"
      },
      "description": "ORB Describe",
      "async": true,
      "ns": "jsfeat",
      "name": "orbDescribe",
      "fn": "on.input.descriptors  = function() {\n  jsfeat.orb.describe($.src, $.corners, $.count, $.descriptors)\n  \n  output( { out: $.write('descriptors', $.descriptors) } );\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "jsfeat": "latest"
        }
      },
      "ports": {
        "input": {
          "src": {
            "title": "Source",
            "type": "function"
          },
          "corners": {
            "title": "Destination",
            "type": "function"
          },
          "sx": {
            "title": "Sx",
            "type": "number"
          },
          "sy": {
            "title": "Sy",
            "type": "number"
          }
        },
        "output": {
          "out": {
            "title": "Dest",
            "type": "function"
          }
        }
      },
      "phrases": {
        "active": "Pyrdown"
      },
      "description": "Pyrdown",
      "async": true,
      "ns": "jsfeat",
      "name": "pyrdown",
      "fn": "on.input.dest = function() {\n  jsfeat.imgproc.pyrdown($.src, $.dest, $.sx, $.sy)\n  \n  output( { out: $.write('dest', $.dest) } );\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "jsfeat": "latest"
        }
      },
      "ports": {
        "input": {
          "src": {
            "title": "Source",
            "type": "function"
          },
          "dest": {
            "title": "Destination",
            "type": "function",
            "async": true
          },
          "width": {
            "title": "width",
            "type": "number"
          },
          "height": {
            "title": "Height",
            "type": "number"
          }
        },
        "output": {
          "out": {
            "title": "Out",
            "type": "function"
          }
        }
      },
      "phrases": {
        "active": "Resampling"
      },
      "description": "Resample",
      "async": true,
      "ns": "jsfeat",
      "name": "resample",
      "fn": "on.input.dest = function() {\n  jsfeat.imgproc.resample($.src, $.dest, $.width, $.height)\n  \n  output( { out: $.write('dest', $.dest) } );\n};\n"
    },
    {
      "ports": {
        "input": {
          "imageData": {
            "title": "Image Data",
            "type": "ImageData"
          },
          "img_u8": {
            "title": "Img U8",
            "type": "function"
          }
        },
        "output": {
          "imageData": {
            "title": "Image Data",
            "type": "ImageData"
          },
          "img_u8": {
            "title": "Img U8",
            "type": "function"
          }
        }
      },
      "phrases": {
        "active": "Converting to U32"
      },
      "description": "To U32",
      "ns": "jsfeat",
      "name": "u32",
      "fn": "output = function() {\n  // in-place \n  const data_u32 = new Uint32Array($.imageData.buffer)\n  const alpha = (0xff << 24)\n  let i = $.img_u8.cols * $.img_u8.rows\n  let pix = 0;\n  while(--i >= 0) {\n    pix = $.img_u8.data[i]\n    data_u32[i] = alpha | (pix << 16) | (pix << 8) | pix\n  }\n\n  cb({\n    out: $.write('imageData', $.imageData),\n    img_u8: $.write('img_u8', $.img_u8)\n  });\n  \n  done();\n};\n"
    }
  ]
}